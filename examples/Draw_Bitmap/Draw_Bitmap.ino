/**
 **************************************************
 *
 * @file        Draw_Bitmap.ino
 * @brief       Drawing bitmap example for Soldered Nokia 5110 LCD Breakout.
 *              This example demonstrates how to convert an image to a bitmap,
 *              store it on your board and then show.
 *
 *              Soldered Nokia 5110 LCD Breakout: solde.red/xxxxxx
 *              Dasduino Core: www.solde.red/333037
 *              Dasduino Connect: www.solde.red/333034
 *              Dasduino ConnectPlus: www.solde.red/333033
 *
 * @authors     Robert @ soldered.com
 ***************************************************/

#include "Nokia-5510-LCD-SOLDERED.h"

/**
 * When declaring the LCD object, you may use Hardware SPI or Software SPI
 * Hardware SPI is faster but must use certain pins on your Dasduino board
 * Note: with Hardware SPI MISO and SS pins aren't used but will still be read
 * and written to during SPI transfer. Be careful when sharing these pins!
 */

/**
 * Hardware SPI
 * Connecting diagram for Dasduino ConnectPlus:
 *
 * Dasduino                 Nokia 5110 LCD Breakout
 * 3V3--------------------->VCC
 * GND--------------------->GND
 * 18---------------------->CLK
 * 23---------------------->MOSI
 * IO33-------------------->DC
 * 5----------------------->CS
 * IO32-------------------->RST
 * 3V3--------------------->OE
 * 3V3--------------------->LED (Backlight)
 *
 * For other boards, change pins CS, MOSI and CLK according to your Hardware SPI pins.
 * For DC and RST you may use any GPIO pins.
 *
 * Declaration is LCD_5510(DC Pin, CS Pin, RST Pin);
 */
// LCD_5510 display = LCD_5510(33, 5, 32);

/**
 * Software SPI
 * Connecting diagram for Dasduino ConnectPlus:
 *
 * Dasduino                 Nokia 5110 LCD Breakout
 * 3V3--------------------->VCC
 * GND--------------------->GND
 * IO25-------------------->CLK
 * IO0--------------------->MOSI
 * IO33-------------------->DC
 * 26---------------------->CS
 * IO32-------------------->RST
 * 3V3--------------------->OE (Output Enable)
 * 3V3--------------------->LED (Backlight)
 *
 * You may change this to any avaiable GPIO pins
 *
 * Declaration is LCD_5510(CLK Pin, MOSI Pin (DIN), DC Pin, CS Pin, RST Pin);
 */
LCD_5510 display = LCD_5510(25, 0, 33, 26, 32);

/**
 * To convert an image in bitmap format, use image2cpp:
 * https://javl.github.io/image2cpp/
 * 
 * Use Draw Mode "Horizontal - 1 bits per pixel"
 * 
 * Upload an 84x48 px image and convert it.
 * Copy and paste the generated code here
 */

const uint8_t image_w = 84;
const uint8_t image_h = 48;
static const unsigned char PROGMEM image_bmp[] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xE0, 0x3F, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x80, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
    0x8F, 0x07, 0xC3, 0xE1, 0xE7, 0xC1, 0xE0, 0x20, 0x70, 0x10, 0x70, 0x9D, 0x8F, 0x81, 0x80, 0xE7, 0xC0, 0x60, 0x20,
    0x30, 0x10, 0x10, 0x98, 0x7F, 0x1F, 0x8C, 0x67, 0xC6, 0x23, 0xE3, 0x11, 0xF1, 0x10, 0x98, 0x3F, 0x1F, 0x9E, 0x67,
    0xC6, 0x23, 0xE3, 0x11, 0xF3, 0x80, 0x8E, 0x0F, 0x83, 0x1E, 0x27, 0xC7, 0x20, 0x63, 0x10, 0x33, 0x80, 0x83, 0x0F,
    0xC1, 0x1E, 0x27, 0xC7, 0x20, 0x60, 0x30, 0x33, 0x80, 0xC1, 0xCF, 0xF0, 0x9E, 0x67, 0xC6, 0x23, 0xE0, 0x71, 0xF3,
    0x80, 0xF0, 0xCF, 0xB8, 0x8C, 0x63, 0xC6, 0x23, 0xE2, 0x31, 0xF3, 0x80, 0x1D, 0xCF, 0x01, 0x80, 0x70, 0x40, 0x60,
    0x23, 0x30, 0x10, 0x10, 0x07, 0x0F, 0x83, 0xC0, 0xF8, 0x40, 0xE0, 0x23, 0x10, 0x10, 0x30, 0x80, 0x0F, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xE0, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF8,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

void setup()
{
    Serial.begin(115200); // For debugging

    // Check if we can initialize the display correctly
    if (!display.begin())
    {
        Serial.println("Can't initialize display!");
        // Go to infinite loop
        while (true)
        {
            delay(100);
        }
    }

    // Set the display's contrast, this is important
    // Adjust the value until you get a satisfactory result for your particular display
    // Values range from 0 to 127
    display.setContrast(63);

    // Show the splash screen image and wait a bit
    display.display();
    delay(3000);

    // Clear the display's buffer
    // This doesn't clear the display fully before we call display.display(), just the memory buffer
    display.clearDisplay();

    // Draw the generated bitmap
    // Arguments are: x start position, y start position, the bitmap in memory, image width and height and finally the
    // color
    display.drawBitmap(0, 0, image_bmp, image_w, image_h, BLACK);

    // Show the image
    display.display();
}

void loop()
{
    // Do nothing
    delay(1000);
}
